1) Linear probing
  Linear probing does a linear search for an empty slot when there is a collision.
  An advantage of this is it is easy to implement and always finds a location if there is one.
  A disadvantage is clusters and clumps of keys form in adjacent slots in the table when these clusters fill most of the array,
  performance deteriorates.

2) Double Hashing

  Double Hashing is a collision resolving technique in Open Addressed Hash tables.
  Double hashing makes the offset to the next position probed depend on the key value, so it can be different for different
  keys. Double hashing uses the idea of applying a second hash function to a key when collision occurs.

  http://cseweb.ucsd.edu/~kube/cls/100/Lectures/lec16/lec16-23.html



3) Random hashing

    Random hashing avoids clustering by making the probe sequence depend on the key.
    The probe sequence is generated by the output of a pseudorandom number generator seeded by the key.
    Random hashing is easy to analyze but because of the randomness of random number generation it is not often as used.



4) shift hashing

  Every time a key wants to be entered into an array.
  You shift all the elements two indexes so that the arr(0) and arr(1) are empty.
  You put the keys into that slot.
  After this is done then you sort.

  It is most likely very time consuming but I think this would work to some extent for smaller tables
